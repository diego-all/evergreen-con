package production

import (
	"encoding/json"
	"evergreen-con/config"
	"fmt"
	"log"
	"os"
)

// With inline type definitions
type AutoGenerated struct {
	Proyectos []struct {
		Nombre      string `json:"nombre"`
		Ubicacion   string `json:"ubicacion"`
		Descripcion string `json:"descripcion"`
		Parcelas    []struct {
			Nombre  string  `json:"nombre"`
			Area    float64 `json:"area"`
			Predios []struct {
				Nombre     string  `json:"nombre"`
				Cultivo    string  `json:"cultivo"`
				Superficie float64 `json:"superficie"`
			} `json:"predios"`
		} `json:"parcelas"`
	} `json:"proyectos"`
}

func ReadJSONmock() {

	// Leer el archivo JSON
	body, err := os.ReadFile("models/locationmodel/location.json")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(body)

	// var data map[string]interface {
	// 	//"proyectos": proyectos,
	// }

	// Decodificar el JSON en una estructura de datos
	//var proyectos []Proyecto
	var data AutoGenerated
	if err := json.Unmarshal([]byte(body), &data); err != nil {
		log.Fatal(err)
	}

	fmt.Println("trin")
	fmt.Println(data)

	//data.Proyectos[0].Parcelas[0].Predios[0].Nombre = "Predio 1"

	// quizas hacer un modelo para el insert de esta vuelta
	//config.DB

	// Recorrer los proyectos y almacenar la informaci√≥n en la tabla locations
	for _, proyecto := range data.Proyectos {
		for _, parcela := range proyecto.Parcelas {
			for _, predio := range parcela.Predios {
				// Generar el valor de la columna location
				//location := fmt.Sprintf("%s, %s, %s", parcela.Nombre, predio.Nombre, predio.Cultivo)
				location := fmt.Sprintf("%s, %s, %s", proyecto.Ubicacion, parcela.Nombre, predio.Nombre)

				// Insertar en la tabla locations
				// _, err := config.DB.Exec("INSERT INTO locations (identifier, name, project, plot, property, created_at, updated_at) VALUES (?, ?, ?, ?, ?, NOW(), NOW())",
				// 	location, proyecto.Nombre, proyecto.Ubicacion, parcela.Nombre, predio.Nombre)
				_, err := config.DB.Exec("INSERT INTO locations (identifier, name, project, plot, property, created_at, updated_at) VALUES (?, ?, ?, ?, ?, NOW(), NOW())",
					location, predio.Cultivo, proyecto.Nombre, parcela.Nombre, predio.Nombre)
				if err != nil {
					log.Fatal(err)
				}

			}
		}
	}

}

func ResetLocation() {
	_, err := config.DB.Exec("TRUNCATE locations;")
	if err != nil {
		log.Fatal(err)
	}
}

func BackupDatabase() {
	// _, err := config.DB.Exec("TRUNCATE locations;")
	// if err != nil {
	// 	log.Fatal(err)
	// }

	var result string

	err := config.DB.QueryRow("SELECT ?", "*** Conexio Est ... Habemus backup ***").Scan(&result)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("From testQuery", result)

}
